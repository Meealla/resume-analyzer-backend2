version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5434:5432"
    networks:
      - app-network

  postgres-analytic:
    image: postgres:15
    container_name: postgres-analytic
    environment:
      POSTGRES_DB: analytics_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5435:5432"
    networks:
      - app-network
    volumes:
      - ./data:/var/lib/postgresql/data


  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - app-network

#  mongo-express:
#    image: mongo-express
#    container_name: mongo-express
#    environment:
#      ME_CONFIG_MONGODB_SERVER: mongodb
#      ME_CONFIG_BASICAUTH_USERNAME: admin
#      ME_CONFIG_BASICAUTH_PASSWORD: password
#    ports:
#      - '8081:8081'
#    depends_on:
#      - mongodb
#    restart: always
#    networks:
#      - app-network


  redis:
    image: redis:7.4.2
    container_name: redis-container
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning --requirepass root
    volumes:
      - ./data:/data

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node

  kibana:
    image: bitnami/kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch



#  resume-analyzer:
#    build:
#      context: ./resume-analyzer
#    container_name: resume-analyzer
#    ports:
#      - "8083:8083"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/test_db
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: root
#    depends_on:
#      - postgres
#    networks:
#      - app-network
#
#  resume-generator:
#    build:
#      context: ./resume-generator
#    container_name: resume-generator
#    ports:
#      - "8082:8082"
#    environment:
#      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/test_db
#    depends_on:
#      - mongodb
#    networks:
#      - app-network
#
#  analytic-service:
#    build:
#      context: .
#      dockerfile: ./analytic-service/Dockerfile
#    container_name: analytic-service
#    ports:
#      - "8084:8084"
#    depends_on:
#      - kafka
#      - elasticsearch
#    environment:
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#      - ELASTICSEARCH_HOST=elasticsearch
#
#
#  api-gateway:
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    ports:
#      - "8765:8765"
#    depends_on:
#      - analytic-service

networks:
  app-network:
    driver: bridge


